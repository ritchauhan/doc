{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fmodern JetBrains Mono;}{\f2\fmodern\fcharset0 JetBrains Mono;}}
{\colortbl ;\red204\green120\blue50;\red169\green183\blue198;\red187\green181\blue41;\red255\green198\blue109;\red152\green118\blue170;\red106\green135\blue89;\red128\green128\blue128;\red104\green151\blue187;\red179\green137\blue197;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs22\lang9 Threads:\b0\par
A thread is single sequential flow of control within a program.\par
1. Single sequential flow of control.\par
2. Sequence of programmed instructions which can be manage indepently.\par
3. Allows the programs to split into simultaneously running tasks.\par
\b Process vs thread:\par
Process:\b0\par
1. Binary instruction loaded into memory.\par
2. Get the access to resource like memory.\par
3. Its own stack, heap, registers.\par
4. Resources are protected from other processes.\par
5.Does its thing.\par
\b Thread:\b0\par
1. Unit of execution with in the process.\par
2. Does the work of the process.\par
3. Usually has a shared objective.\par
4. Has shared resources like memory and heap storage.\par
\b Process with threads:\b0\par
Process has its own stack, heap and memory. It has  either a single thread or muliple threat working parallely.\par
\b Threads and Runnable:\par
\b0 1. Need to implement Runnable interface.\par
    public void run() \{\} // this method will be implemented by default.\par
2. Thread thread = new Thread(new Runnable class())\par
      thread.start()\par
\b How does the thread ends ?\b0\par
a. When the run methods returns.\par
b. An exception is thrown.\par
Threat basic summary:\par
1. Runnable is functional interface.\par
2. Lambdas can be used instead of Runnable class.\par
3. Thread can be subclassed to create Runnable.\par
4. Recommend creating a new Runnable instead of subclassing Thread.\par
Alternate way to run threat.\par
1. By implementing Runnable interface.\par
     for example:\par

\pard\box\brdrdash\brdrw0 \li720\sa200\sl276\slmult1\cf1\f1\fs20 public class \cf2 MyRunnable \cf1 implements \cf2 Runnable\{\line     \cf3 @Override\line     \cf1 public void \cf4 run\cf2 () \{\line         System.\cf5\i out\cf2\i0 .println(\cf6 " Running Threads "\cf2 )\cf1 ;\line     \cf2\}\line\}\cf0\f0\fs22\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\tab\cf2\f1\fs20 Thread thread = \cf1 new \cf2 Thread(\cf1 new \cf2 MyRunnable())\cf1 ;\line\f0\lang1033\tab\cf2\f1\lang9 thread.start()\cf1 ;\par
\cf0\f0\fs22                // lambda way\par
\tab\cf1\f1\fs20 new \cf2 Thread(() -> System.\cf5\i out\cf2\i0 .println(\cf6 "2nd Thread \f0\lang1033\tab\f1\lang9 running"\cf2 )).start()\cf1 ;\par
\cf0\f0\fs22 2. By extending Thread class.\par

\pard\box\brdrdash\brdrw0 \li720\sa200\sl276\slmult1\cf1\f1\fs20\lang1033 public class \cf2 MyThread \cf1 extends \cf2 Thread \{\line     \cf1 public void \cf4 run\cf2 () \{\line         System.\cf5\i out\cf2\i0 .println(\cf6 "Thread run for thread class: "\cf2 )\cf1 ;\line     \cf2\}\line     \cf1 public static void \cf4 main\cf2 (String[] args) \{\line         MyThread myThread = \cf1 new \cf2 MyThread()\cf1 ;\line         \cf2 myThread.start()\cf1 ;\line     \cf2\}\par
\}\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\cf0\b\f0\fs22\lang9 Types of threads:\b0\par
1. User Thread.\par
2. Daemon Thread.\par
\b When does a java application ends ?\par
\b0 When the user threads ends.\par
When you don't want the application exit for a thread then use Daemon thread.\par
threat.setDaemon(true);\par
For background work or monitoring the applications we use daemon theads so it doesn't need to end it will run in background and monitor the application behaviour and once main application exit this also exits.\par
\b Thread State:\b0\par
New\par
Runnable\par
Blocked\par
Waiting\par
Timed Waiting\par
Terminated\par
To get the state of the thread you can use Thread.state Enum which has all these states defined.\par
\b sleep():\b0\par
To wait we can put Threat.sleep(millisecond);\par
\b Join():\b0\par
Join() will be used to wait for all thread to completes or die. this is also called\b  Barrier Synchronization.\par
Interrupts:\par
\b0 Thread.interrupts() - to stop execution of a thread.\par
this is soft interrupts.\par
very different from hardware interrupts.\par
depends on what the implementation does.\par
Its best practice to handle interrupts for threads since it can happen any way.\par
We should really do like this for thread.\par
while(true) \{\par
\tab ... task running\par
\tab if(Thread.intrerrupted()) \{\par
\tab\tab throw new InterruptedException();\par
\tab\}\par
\}\par
\b Scheduler:\b0\par
Unschedules a running thread temporarily as needed.\par
Tries to be fair.\par
Honors priorities.\par
Non deterministic.\b\par
Parellelism:\par
\b0 Running many different tasks at the same time.\par
By definition, needs multiple cores.\par
\b Concurrency:\b0\par
Multiple task in process at same time. Scheduler will switch the task based on the resurce availabilty.\par
Can be done with multicore CPUs. \par
Can be done with single CPUs. In this scenario, scheduler has main task to do since it has switch tasks.\par
\b Synchronization:\b0\par
Need of synchronization:\par
In thread worlds we have multipl scenario's where you need synchronization but some scenarios its not required.\par
Not required:\par
1. When threads don't share data.\par
2. When threads share constant data.\par
Required.\par
1. When thread read and write same data. \par
\b How Synchronization Works:\b0\par
1. JVM creates a virtual "lock" from data element\par
2. Thread tries to "acquire" a lock.\par
3. If it acquires it, it can execute the synchronized code.\par
4. Thread finishes executing blocks and "releases" lock.\par
5. All other threads that need to execute the block needs to wait. \par
\b Synchronized block:\b0\par
1. thread tries to get access to monitor lock.\par
2. If threat gets it, it executes the the block.\par
3. Release the monitor lock when exiting the block.\par
4. Any other threads needs to wait (Can't get monitor lock).\par
For Example:\par
\cf1\f1\fs20 synchronized \cf2 (\cf1 this\cf2 ) \{\line     increment()\cf1 ;\line     \cf2 System.\cf5\i out\cf2\i0 .println(Thread.\i currentThread\i0 ().getName() + \cf6 " after \f0\lang1033\tab\tab\tab\f1\lang9 increment : " \cf2 + \cf5 value\cf2 )\cf1 ;\line     \cf2 decrement()\cf1 ;\line     \cf2 System.\cf5\i out\cf2\i0 .println(Thread.\i currentThread\i0 ().getName() + \cf6 " after \f0\lang1033\tab\tab\tab\f1\lang9 decrement : " \cf2 + \cf5 value\cf2 )\cf1 ;\line\cf2\}\par
\cf0\b\f0\fs22 Synchronized method:\b0\par
Lock is associated with object whose method is being called.\par
Note: Syncronized blocks or code under synchronized block is called critical section.\par
\b Mutual Exclusion (Mutex) :\b0\par
Only one thread can access a critical section at a time. \par
\b Visibility:\b0\par
1. Value is read from memory block execution.\par
2. Value is written to the memory after block execution completes.\par
\b Structured Lock:\b0\par
1. Block staructure using synchronized keyword.\par
2. Aquiring and releasing lock is implicit.\par
3. Example: Exception causing control to exit: lock auto released.\b\par
Mutex Lock:\par
\b0 1. Choose the right object for the lock.\par
2. synchronize the bare minimum code neccessary.\par
\b Problem with Mutex lock:\par
\b0 1. Choosing the wrong lock.\par
2. Extreme synchronization.\par
\b Liveness - deadlock, livelocks and starvation :\par
Liveness :\par
\b0 1. State of general activity and motion.\par
2. Requires a system to make progress.\par
3. Not "Stuck".\par
4. Something good will eventually occurs.\par
\b Program Execution :\par
\b0 1. Starts.\par
2. Executes.\par
3. Completes completely or error outs.\par
4. Hangs.\par
\b Liveliness issue with concurrency:\par
\b0 DeadLock.\par
Livelock.\par
Starvation.\par
\b DeadLock:\par
\b0 1. Multiple threads are waiting for each other.\par
2. The dependency is circular.\par
Example:\par
The "No you hang up first" problem.\par
synchronized(obj1) \{\par
\tab synchronized(obj2) \{\}\par
\tab // code execution.\par
\}\par
synchronized(obj2) \{\par
\tab synchronized(obj1) \{\}\par
\tab // code execution.\par
\}\par
\b Other problems:\par
\b0 1. Circular invocation of each other.\par
2. Two threads invoking joins on each other.\par
\b LiveLock:\par
\b0 A smarter deadlock. naive way to handling deadlock creats livelock problem.\par
\b A naive solution to deadlock:\par
\b0 1. Try to get lock 1.\par
2. Try to get lock 1.\par
3. If lock 2 doesn't aquired in 1ms then release lock 1.\par
4. try again sometimes.\par
For eaxmple: If thread 1 has lock1 and waiting for lock 2 and thread 2 has lock 2 and waiting for lock1 and after sometime both release the lock and try same with after a while but mostly same issue will repeats.\par
Two people in each other's way in corridor.\par
\b Problem with livelock:\par
\b0 1. Potential deadlock\par
2. Steps taken to mitigate deadlock causes perpetual "corrective" action.\par
3. Not completely dead.\par
4. ..but all activity to just get to the lock.\par
\b Starvation:\par
\b0 Thread is ready to run but never given a chance.\par
For example:\par
Low priority thread not schedule by excutor.\par
Infinte postponement.\par
\b How do you avoid ?\par
\b0 1. No java/jvm feature to avoid these.\par
2. Careful use of locks.\par
3. Avoid using more than one lock.\par
\b Volatile Key :\b0\par
Stores in memory\par
Visibility problem is solved but ordering might be problematic.\par
write to memory\par
read from memory\par
Note: thread will also store other variable in block to memory where volatile key word is there but sometime if ordering is wrong this will not happens.\par
\b Thread Local:\b0\par
1. Generic class.\par
2. Almost like a wrapper.\par
3. Each thread sets and get a different values.\par
\b Unstructured Lock and lock objects:\par
\b0 This is unstructured way to implement synchronization.\par
example:\par
\cf1\f1\fs20 private \cf2 Lock \cf5 l \cf2 = \cf1 new \cf2 ReentrantLock()\cf1 ;\cf0\b\f0\fs22\par
\cf7\b0\f1\fs20 // lock implementation also work like synchronization\line // If any exception occur during this execution, lock will be released.\line\cf1 try \cf2\{\line     \cf5 l\cf2 .lock()\cf1 ;\line     \cf2 increment()\cf1 ;\line     \cf2 System.\cf5\i out\cf2\i0 .println(Thread.\i currentThread\i0 ().getName() + \cf6 " after increment : " \cf2 + \cf1 this\cf2 .getValue())\cf1 ;\line     \cf2 decrement()\cf1 ;\line     \cf2 System.\cf5\i out\cf2\i0 .println(Thread.\i currentThread\i0 ().getName() + \cf6 " after decrement : " \cf2 + \cf1 this\cf2 .getValue())\cf1 ;\line\cf2\} \cf1 finally \cf2\{\line     \cf5 l\cf2 .unlock()\cf1 ;\line\cf2\}\par
\cf0\f0\fs22 Executor services:\par
1. Manages runnable (or "task") for you.\par
2. Provides extra abilities(thread pool).\par
3. Enables result.\par
Basically thread executor services used to reuse threats and manage thread pool. Thease APIs will return a value when thread task is done.\par
Example :\par
\cf2\f1\fs20 ExecutorService executorService = Executors.\i newFixedThreadPool\i0 (\cf8 2\cf2 )\cf1 ;\par
\cf2 executorService.execute(runnable)\cf1 ;\par
\cf0\f0\fs22 Types of Executor Service:\par
1. Fixed thread pool executor. \par
\tab - When number of thread is fixed.\par
2. Single threaded executor.\par
\tab - When number of thread is fixed to 1.\par
3. Cached thread pool executor.\par
\tab - When thread size is dynamic. it will not be fixed based requirenment this will create the thread or destroy the thread. Its use synchronous queue.\par
4. Scheduled thread pool executor.\par
\tab - Schedule threads executor will schedule the task and available thread will execute the task or new thread will be spawn to execute the task.\par
5. Work stealing thread pool executor. \par
\tab - Newly added from java 7. this uses parallelism level concept.\par
\b Callable:\b0\par
Callable is interface like Runnable but we don't need to pass this on thread class. Callable will be handle ExecutorService and ExecutorService will use callable interface ro run tasks through call method. It has returns the result as well which will be used by Future object to show the result.\par
For example:\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\cf2\f1\fs20 Callable<Integer> callable = \cf1 new \cf2 Callable<Integer>() \{\line     \cf3 @Override\line     \cf1 public \cf2 Integer \cf4 call\cf2 () \cf1 throws \cf2 Exception \{\line         System.\cf5\i out\cf2\i0 .println(\cf6 "number is: " \cf2 + \cf9 num\cf2 )\cf1 ;\line         return \cf2 BigThrad.\i getBigThread\i0 (\cf9 num\cf2 )\cf1 ;\line     \cf2\}\line\}\cf1 ;\line\cf2 Future<Integer> futureResult = executorService.submit(callable)\cf1 ;\line\cf2 futureStatus.add(futureResult)\cf1 ;\cf0\f0\fs22\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\b Future :\par
\b0 This is interface to show different status of thread which is returned from callable interface for example:\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\cf2\f1\fs20 Iterator<Future<Integer>> futureIterator = futureStatus.iterator()\cf1 ;\line while \cf2 (futureIterator.hasNext()) \{\line     Future<Integer> res = futureIterator.next()\cf1 ;\line     \cf2 System.\cf5\i out\cf2\i0 .println(\cf6 "waiting for the result" \cf2 +res)\cf1 ;\line     if\cf2 (res.isDone()) \{\line         System.\cf5\i out\cf2\i0 .println(\cf6 " result is :" \cf2 + res.get())\cf1 ;\line         \cf2 futureIterator.remove()\cf1 ;\line     \cf2\}\line\}\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\cf0\f0\fs22\par
\par
\par
\b\par
\par
\b0\par
\par
\b\par
\b0\par
\cf2\f1\fs20\par
\cf0\f0\fs22\par
\par
\par
\par
 \cf1\f2\fs20\par
\cf0\f0\fs22\par
}
 